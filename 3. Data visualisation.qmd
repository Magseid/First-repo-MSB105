---
title: "R for data science"
format: html
editor: visual
---

# 3.1 Introduction

```{r}
#| label: setup
library(tidyverse)
```

# 3.2 First steps

```{r}
mpg
```

```{r}
ggplot(data = mpg)+
  geom_point(mapping = aes(x = displ, y = hwy))
```

# 3.3 Aesthetic mappings

```{r}
# utvider ggplott til å inkludere en til variabel "color"
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```

```{r}
# kan også endre "color" til "size" eller bruke begge
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = class, color = class))
# kan også bruke "alpha" for å endre på gjennomsiktigheten, eller "shape" for å endre form på punktene
# ved bruk av "shape" vil den som standard kun bruke 6 forskjellige former for å definer variabler, altså vil en av 
# variablene i dette plottet ikke bli definert fordi vi har 7 variabler
```

```{r}
# kan også legge til farge manuelt
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy),color = "blue")
```

# 3.5 Facets

```{r}
# legger til "facet" for å vis flere variabler i ulike plot
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)
```

```{r}
# 
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ cyl)
```

# Exercice:

```{r}
# 1. What happens if you facet on a continuous variable?
# Om man bruker en kontinuerlig variable i en facet, vil du få ett panel per unike tallverdi -> ofte veldig mange paneler som blir uoversiktelig. Faceting er egentlig ment for kategoriske variabler som i dette tilfelle feks er "cyl, drv og class"
```

```{r}
# 2. What do the empty cells in plot with facet_grid(drv ~ cyl) mean? How do they relate to this plot?

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = drv, y = cyl))

# De tomme cellene er kombinasjoner av "drv" og "cyl" som ikke finnes i datasettet.
# Faceit_grid lager et rutenett av alla mulige kobinasjoner, selv om noen er tomme.

ggplot(data = mpg) +
  geom_point(mapping = aes(x = drv, y = cyl)) +
  facet_grid(drv ~ cyl)

```

```{r}
## 3. What plots does the following code make? What does . do?
# ggplot(data = mpg) + 
#   geom_point(mapping = aes(x = displ, y = hwy)) +
#   facet_grid(drv ~ .)

# ggplot(data = mpg) + 
#   geom_point(mapping = aes(x = displ, y = hwy)) +
#   facet_grid(. ~ cyl)

# "." betyr "ingen faceting" på denne aksen. altså sier den første koden at vi skal ha egne rader for hver "drv", og for den andre koden vil vi ha egne kolonner for hver "cyl"  


ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)   # rader = drv, ingen kolonner

ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(. ~ cyl)   # kolonner = cyl, ingen rader

```

```{r}
## 4. Take the first faceted plot in this section:
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  facet_wrap(~ class, nrow = 2)
## What are the advantages to using faceting instead of the colour aesthetic? What are the disadvantages? How might the balance change if you had a larger dataset?

# Fordeler med å bruke facet er at det blir lettere å sammenligne mønstre innen hver kategori, mindre visuell støy.
# Ulemper er at det blir vanskeligere å sammanligne mellom kategoriene. 
# Med større datasett kan faceting bli mer nyttig (unngår kaos av mange farger) .
```

```{r}
## 5. Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesn’t facet_grid() have nrow and ncol arguments?
#  "nrow" og "ncol" kontrolerer hvor mange kolonner og rader som skal med i faceten.
#  facet_grid har ikke "ncol" og "nrow" fordi den alltif viser alle mulige kombinasjoner av to variabler i et fast rutenett.
```

```{r}
## 6. Hvorfor bør du sette variabelen med flest unike nivåer i kolonner i facet_grid()? 
# Skjermer er ofte bredere enn høye → bedre utnyttelse av plassen hvis du legger mange paneler bortover (i kolonner) i stedet for nedover.
```

## 3.6 Geometric objects

```{r}
# Geom er et objekt som et plott bruker for å presentere data. Man beskriver ofte et plot ut ifra hvilken type geom som blir brukt. f.eks vil en "line chart" bli kalt for et "line plot" og et "boxplot" vil bli kalt for "boxplot geom"

# nr.1 -> bruker geom_point
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))

# nr.2  -> bruker geom_smooth
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))

```

```{r}
# en hver geom funksjon har en "mapping" funksjon, men ikke alle "aesthetic fungerer med alle geom. altså kan man endre fassong på et punkt, men ikke på en linje. Men på den andre siden så kan man sette en linjetype til en linje. 
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```

```{r}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
              
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
    
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = TRUE
  )
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = FALSE
  )
```

```{r}
# Legger til flere geoms i samme plot
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

```{r}
# Kan redusere koden når vi har gjentagende koder som den vi har over. dette kan være problematisk dersom vi ønsker å endre x-aksen til f.eks. "cty" istedenfor "hwy" fordi da må vi endre dette på 2 steder i koden, og dette kan raskt bli glemt.
# Vi kan rydde opp i dette ved å sette "mapping" funksjonen inn i ggplot()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```

```{r}
# Hvis du legger mapping inni en geom-funksjon, vil ggplot2 behandle det som lokal mapping for det laget. Denne mappingen brukes til å utvide eller overskrive den globale mappingen, men bare for det laget. På den måten kan man vise ulike aestetics i forskjellige lag.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth()
```

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_point(mapping = aes(color = class)) +
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)

# (data = filter(mpg, class == "subcompact") betyr at smooth-linjen bare beregnes for subcompact-biler
# se = FALSE fjerner "skyggen" rundt linjen
```

# Exercice

```{r}
## 1. What geom would you use to draw a line chart? A boxplot? A histogram? An area chart?
# line chart = geom_line()
# boxplot = geom_boxplot()
# histogram = geom_histogram()
# area chart = geom_area()
```

```{r}
# 2. Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_point() + 
  geom_smooth(se = FALSE)
```

```{r}
## 3. What does show.legend = FALSE do? What happens if you remove it? why do you think I used it earlier in the chapter?
# show.legend = FALSE brukes i geom_*()-funksjoner for å hindre at et lag dukker opp i legenden.
```

```{r}
## 4. What does the "se" argument to geom_smooth() do?
# se bestemmer om ggplot skal vise konfidensintervallet (usikkerhetsbåndet) rundt den glatte linjen. altså bestemmer om linjen skal ha en "skygge"

```

```{r}
# 5. Will these two graphs look different? Why/why not?
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()

ggplot() + 
  geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))

# Det første plottet setter data og mapping globalt i ggplot(). Det betyr at både punktene og           smooth-linjen arver dette automatisk.

# Det andre plottet starter med et tomt ggplot(), og så legges data og mapping lokalt inn i hvert lag   (geom_point() og geom_smooth()).

# Resultatet blir identisk, fordi begge lag i andre koden har fått samme data og mapping som det        første.
```

![](images/clipboard-1313578573.png){width="416"}

```{r}
## 6. Recreate the R code necessary to generate the following graphs.

# 1
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(se = FALSE)

# 2
ggplot() +
  geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy, group = drv), se = FALSE)

# 3
ggplot() +
  geom_point(data = mpg, mapping = aes( x = displ, y = hwy, color = drv)) +
  geom_smooth(data = mpg, mapping = aes( x = displ, y = hwy, color = drv),se = FALSE)

# 4
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_point(data = mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_smooth(se = FALSE)

# 5
ggplot() +
  geom_point(data = mpg, mapping = aes( x = displ, y = hwy, color = drv)) +
  geom_smooth(data = mpg, mapping = aes( x = displ, y = hwy, linetype = drv), se = FALSE)

# 6
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, fill = drv)) +
  geom_point(shape = 21, color = "white", size = 3, stroke = 1)
```

